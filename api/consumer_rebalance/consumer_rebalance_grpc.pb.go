// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/consumer_rebalance/consumer_rebalance.proto

package consumer_rebalance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsumerRebalance_Rebalance_FullMethodName = "/consumer_rebalance.consumer_rebalance/Rebalance"
	ConsumerRebalance_Commit_FullMethodName    = "/consumer_rebalance.consumer_rebalance/Commit"
)

// ConsumerRebalanceClient is the client API for ConsumerRebalance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerRebalanceClient interface {
	Rebalance(ctx context.Context, in *RebalanceRequest, opts ...grpc.CallOption) (*RebalanceResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type consumerRebalanceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerRebalanceClient(cc grpc.ClientConnInterface) ConsumerRebalanceClient {
	return &consumerRebalanceClient{cc}
}

func (c *consumerRebalanceClient) Rebalance(ctx context.Context, in *RebalanceRequest, opts ...grpc.CallOption) (*RebalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebalanceResponse)
	err := c.cc.Invoke(ctx, ConsumerRebalance_Rebalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerRebalanceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, ConsumerRebalance_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerRebalanceServer is the server API for ConsumerRebalance service.
// All implementations must embed UnimplementedConsumerRebalanceServer
// for forward compatibility.
type ConsumerRebalanceServer interface {
	Rebalance(context.Context, *RebalanceRequest) (*RebalanceResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	mustEmbedUnimplementedConsumerRebalanceServer()
}

// UnimplementedConsumerRebalanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumerRebalanceServer struct{}

func (UnimplementedConsumerRebalanceServer) Rebalance(context.Context, *RebalanceRequest) (*RebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (UnimplementedConsumerRebalanceServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedConsumerRebalanceServer) mustEmbedUnimplementedConsumerRebalanceServer() {}
func (UnimplementedConsumerRebalanceServer) testEmbeddedByValue()                           {}

// UnsafeConsumerRebalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerRebalanceServer will
// result in compilation errors.
type UnsafeConsumerRebalanceServer interface {
	mustEmbedUnimplementedConsumerRebalanceServer()
}

func RegisterConsumerRebalanceServer(s grpc.ServiceRegistrar, srv ConsumerRebalanceServer) {
	// If the following call pancis, it indicates UnimplementedConsumerRebalanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsumerRebalance_ServiceDesc, srv)
}

func _ConsumerRebalance_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerRebalanceServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerRebalance_Rebalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerRebalanceServer).Rebalance(ctx, req.(*RebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerRebalance_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerRebalanceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerRebalance_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerRebalanceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerRebalance_ServiceDesc is the grpc.ServiceDesc for ConsumerRebalance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerRebalance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumer_rebalance.consumer_rebalance",
	HandlerType: (*ConsumerRebalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rebalance",
			Handler:    _ConsumerRebalance_Rebalance_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _ConsumerRebalance_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/consumer_rebalance/consumer_rebalance.proto",
}
