syntax = "proto3";
package broker_rpc;

option go_package = "api/broker_rpc";

service Broker {
    rpc PushMessages(stream PushMessagesRequest) returns (stream PushMessagesResponse) {}
    rpc PullMessages(PullMessagesRequest) returns (stream PullMessagesResponse) {}
}

enum RetCode {
    SUCCESS = 0;
    ERROR = 1;
}

message PushMessagesRequest {
    message Topic{
        message Partition{
            optional int32 PartitionID = 1;
            repeated bytes Datas = 2;
        }
        optional string TopicName = 1;
        repeated Partition Partitions = 2;
    }
    optional uint64 ProducerID = 1;
    optional uint64 SequenceNumber = 2;
    optional int32 Acks = 3;
    repeated Topic Topics = 4;
}

message PushMessagesResponse {
    message TopicResponses{
        message PartitionResponses{
            optional int32 PartitionID = 1;
            optional RetCode Ret=2;
            optional uint64 StartIndex = 3;
        }
        optional string TopicName = 1;
        repeated PartitionResponses Partitions = 2;
    }
    repeated TopicResponses Topics = 1;
}

message PullMessagesRequest {
    message Topic{
        message Partition{
            optional int32 PartitionID = 1;
            optional uint64 FetchIndex = 2;
            optional uint32 MaxBytes = 3;
        }
        optional string TopicName = 1;
        repeated Partition Partitions = 2;
    }
    repeated Topic Topics = 1;
    
}

message PullMessagesResponse {
    message TopicResponses{
        message PartitionResponses{
            optional int32 PartitionID = 1;
            optional RetCode Ret=2;
            repeated bytes Datas = 3;
        }
        optional string TopicName = 1;
        repeated PartitionResponses Partitions = 2;
    }
    repeated TopicResponses Topics = 1;
}