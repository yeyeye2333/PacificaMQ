// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/broker_rpc/broker_rpc.proto

package broker_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Broker_PushMessages_FullMethodName   = "/broker_rpc.Broker/PushMessages"
	Broker_PullMessages_FullMethodName   = "/broker_rpc.Broker/PullMessages"
	Broker_CommitIndex_FullMethodName    = "/broker_rpc.Broker/CommitIndex"
	Broker_GetCommitIndex_FullMethodName = "/broker_rpc.Broker/GetCommitIndex"
	Broker_InitProducerID_FullMethodName = "/broker_rpc.Broker/InitProducerID"
)

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	PushMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PushMessagesRequest, PushMessagesResponse], error)
	PullMessages(ctx context.Context, in *PullMessagesRequest, opts ...grpc.CallOption) (*PullMessagesResponse, error)
	CommitIndex(ctx context.Context, in *CommitIndexRequest, opts ...grpc.CallOption) (*CommitIndexResponse, error)
	GetCommitIndex(ctx context.Context, in *GetCommitIndexRequest, opts ...grpc.CallOption) (*GetCommitIndexResponse, error)
	InitProducerID(ctx context.Context, in *InitProducerIDRequest, opts ...grpc.CallOption) (*InitProducerIDResponse, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) PushMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PushMessagesRequest, PushMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[0], Broker_PushMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushMessagesRequest, PushMessagesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Broker_PushMessagesClient = grpc.BidiStreamingClient[PushMessagesRequest, PushMessagesResponse]

func (c *brokerClient) PullMessages(ctx context.Context, in *PullMessagesRequest, opts ...grpc.CallOption) (*PullMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullMessagesResponse)
	err := c.cc.Invoke(ctx, Broker_PullMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) CommitIndex(ctx context.Context, in *CommitIndexRequest, opts ...grpc.CallOption) (*CommitIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitIndexResponse)
	err := c.cc.Invoke(ctx, Broker_CommitIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GetCommitIndex(ctx context.Context, in *GetCommitIndexRequest, opts ...grpc.CallOption) (*GetCommitIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommitIndexResponse)
	err := c.cc.Invoke(ctx, Broker_GetCommitIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) InitProducerID(ctx context.Context, in *InitProducerIDRequest, opts ...grpc.CallOption) (*InitProducerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitProducerIDResponse)
	err := c.cc.Invoke(ctx, Broker_InitProducerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility.
type BrokerServer interface {
	PushMessages(grpc.BidiStreamingServer[PushMessagesRequest, PushMessagesResponse]) error
	PullMessages(context.Context, *PullMessagesRequest) (*PullMessagesResponse, error)
	CommitIndex(context.Context, *CommitIndexRequest) (*CommitIndexResponse, error)
	GetCommitIndex(context.Context, *GetCommitIndexRequest) (*GetCommitIndexResponse, error)
	InitProducerID(context.Context, *InitProducerIDRequest) (*InitProducerIDResponse, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServer struct{}

func (UnimplementedBrokerServer) PushMessages(grpc.BidiStreamingServer[PushMessagesRequest, PushMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushMessages not implemented")
}
func (UnimplementedBrokerServer) PullMessages(context.Context, *PullMessagesRequest) (*PullMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMessages not implemented")
}
func (UnimplementedBrokerServer) CommitIndex(context.Context, *CommitIndexRequest) (*CommitIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitIndex not implemented")
}
func (UnimplementedBrokerServer) GetCommitIndex(context.Context, *GetCommitIndexRequest) (*GetCommitIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitIndex not implemented")
}
func (UnimplementedBrokerServer) InitProducerID(context.Context, *InitProducerIDRequest) (*InitProducerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProducerID not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}
func (UnimplementedBrokerServer) testEmbeddedByValue()                {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_PushMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).PushMessages(&grpc.GenericServerStream[PushMessagesRequest, PushMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Broker_PushMessagesServer = grpc.BidiStreamingServer[PushMessagesRequest, PushMessagesResponse]

func _Broker_PullMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).PullMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_PullMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).PullMessages(ctx, req.(*PullMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_CommitIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).CommitIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_CommitIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).CommitIndex(ctx, req.(*CommitIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GetCommitIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetCommitIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_GetCommitIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetCommitIndex(ctx, req.(*GetCommitIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_InitProducerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitProducerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).InitProducerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_InitProducerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).InitProducerID(ctx, req.(*InitProducerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker_rpc.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullMessages",
			Handler:    _Broker_PullMessages_Handler,
		},
		{
			MethodName: "CommitIndex",
			Handler:    _Broker_CommitIndex_Handler,
		},
		{
			MethodName: "GetCommitIndex",
			Handler:    _Broker_GetCommitIndex_Handler,
		},
		{
			MethodName: "InitProducerID",
			Handler:    _Broker_InitProducerID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushMessages",
			Handler:       _Broker_PushMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/broker_rpc/broker_rpc.proto",
}
